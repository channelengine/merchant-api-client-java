/*
 * ChannelEngine Merchant API
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.9.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.channelengine.merchant.apiclient.api;

import com.channelengine.merchant.apiclient.ApiCallback;
import com.channelengine.merchant.apiclient.ApiClient;
import com.channelengine.merchant.apiclient.ApiException;
import com.channelengine.merchant.apiclient.ApiResponse;
import com.channelengine.merchant.apiclient.Configuration;
import com.channelengine.merchant.apiclient.Pair;
import com.channelengine.merchant.apiclient.ProgressRequestBody;
import com.channelengine.merchant.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.channelengine.merchant.apiclient.model.CollectionOfMerchantOrderResponse;
import java.io.File;
import com.channelengine.merchant.apiclient.model.FulfillmentType;
import com.channelengine.merchant.apiclient.model.MerchantOrderAcknowledgementRequest;
import com.channelengine.merchant.apiclient.model.MerchantOrderCommentUpdateRequest;
import com.channelengine.merchant.apiclient.model.ModelApiResponse;
import org.threeten.bp.OffsetDateTime;
import com.channelengine.merchant.apiclient.model.OrderStatusView;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderApi {
    private ApiClient localVarApiClient;

    public OrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for orderAcknowledge
     * @param merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderAcknowledgeCall(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantOrderAcknowledgementRequest;

        // create path and map variables
        String localVarPath = "/v2/orders/acknowledge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderAcknowledgeValidateBeforeCall(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = orderAcknowledgeCall(merchantOrderAcknowledgementRequest, _callback);
        return localVarCall;

    }

    /**
     * Acknowledge Order.
     * Acknowledge an order. By acknowledging the order the merchant can confirm that&lt;br /&gt;the order has been imported. When acknowledging an order the merchant has to supply&lt;br /&gt;references that uniquely identify the order and the order lines. These references&lt;br /&gt;will be used in the other API calls.
     * @param merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse orderAcknowledge(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = orderAcknowledgeWithHttpInfo(merchantOrderAcknowledgementRequest);
        return localVarResp.getData();
    }

    /**
     * Acknowledge Order.
     * Acknowledge an order. By acknowledging the order the merchant can confirm that&lt;br /&gt;the order has been imported. When acknowledging an order the merchant has to supply&lt;br /&gt;references that uniquely identify the order and the order lines. These references&lt;br /&gt;will be used in the other API calls.
     * @param merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> orderAcknowledgeWithHttpInfo(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest) throws ApiException {
        okhttp3.Call localVarCall = orderAcknowledgeValidateBeforeCall(merchantOrderAcknowledgementRequest, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Acknowledge Order. (asynchronously)
     * Acknowledge an order. By acknowledging the order the merchant can confirm that&lt;br /&gt;the order has been imported. When acknowledging an order the merchant has to supply&lt;br /&gt;references that uniquely identify the order and the order lines. These references&lt;br /&gt;will be used in the other API calls.
     * @param merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderAcknowledgeAsync(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderAcknowledgeValidateBeforeCall(merchantOrderAcknowledgementRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderGetByFilter
     * @param statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param emailAddresses Client emailaddresses to filter on. (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fromDate Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param toDate Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param onlyWithCancellationRequests Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderGetByFilterCall(List<OrderStatusView> statuses, List<String> emailAddresses, List<String> merchantOrderNos, List<String> channelOrderNos, OffsetDateTime fromDate, OffsetDateTime toDate, OffsetDateTime fromCreatedAtDate, Boolean excludeMarketplaceFulfilledOrdersAndLines, FulfillmentType fulfillmentType, Boolean onlyWithCancellationRequests, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statuses", statuses));
        }

        if (emailAddresses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "emailAddresses", emailAddresses));
        }

        if (merchantOrderNos != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "merchantOrderNos", merchantOrderNos));
        }

        if (channelOrderNos != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "channelOrderNos", channelOrderNos));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (fromCreatedAtDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromCreatedAtDate", fromCreatedAtDate));
        }

        if (excludeMarketplaceFulfilledOrdersAndLines != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeMarketplaceFulfilledOrdersAndLines", excludeMarketplaceFulfilledOrdersAndLines));
        }

        if (fulfillmentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulfillmentType", fulfillmentType));
        }

        if (onlyWithCancellationRequests != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyWithCancellationRequests", onlyWithCancellationRequests));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderGetByFilterValidateBeforeCall(List<OrderStatusView> statuses, List<String> emailAddresses, List<String> merchantOrderNos, List<String> channelOrderNos, OffsetDateTime fromDate, OffsetDateTime toDate, OffsetDateTime fromCreatedAtDate, Boolean excludeMarketplaceFulfilledOrdersAndLines, FulfillmentType fulfillmentType, Boolean onlyWithCancellationRequests, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = orderGetByFilterCall(statuses, emailAddresses, merchantOrderNos, channelOrderNos, fromDate, toDate, fromCreatedAtDate, excludeMarketplaceFulfilledOrdersAndLines, fulfillmentType, onlyWithCancellationRequests, page, _callback);
        return localVarCall;

    }

    /**
     * Get Orders By Filter.
     * Fetch orders based on the provided OrderFilter.
     * @param statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param emailAddresses Client emailaddresses to filter on. (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fromDate Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param toDate Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param onlyWithCancellationRequests Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return CollectionOfMerchantOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CollectionOfMerchantOrderResponse orderGetByFilter(List<OrderStatusView> statuses, List<String> emailAddresses, List<String> merchantOrderNos, List<String> channelOrderNos, OffsetDateTime fromDate, OffsetDateTime toDate, OffsetDateTime fromCreatedAtDate, Boolean excludeMarketplaceFulfilledOrdersAndLines, FulfillmentType fulfillmentType, Boolean onlyWithCancellationRequests, Integer page) throws ApiException {
        ApiResponse<CollectionOfMerchantOrderResponse> localVarResp = orderGetByFilterWithHttpInfo(statuses, emailAddresses, merchantOrderNos, channelOrderNos, fromDate, toDate, fromCreatedAtDate, excludeMarketplaceFulfilledOrdersAndLines, fulfillmentType, onlyWithCancellationRequests, page);
        return localVarResp.getData();
    }

    /**
     * Get Orders By Filter.
     * Fetch orders based on the provided OrderFilter.
     * @param statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param emailAddresses Client emailaddresses to filter on. (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fromDate Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param toDate Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param onlyWithCancellationRequests Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return ApiResponse&lt;CollectionOfMerchantOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionOfMerchantOrderResponse> orderGetByFilterWithHttpInfo(List<OrderStatusView> statuses, List<String> emailAddresses, List<String> merchantOrderNos, List<String> channelOrderNos, OffsetDateTime fromDate, OffsetDateTime toDate, OffsetDateTime fromCreatedAtDate, Boolean excludeMarketplaceFulfilledOrdersAndLines, FulfillmentType fulfillmentType, Boolean onlyWithCancellationRequests, Integer page) throws ApiException {
        okhttp3.Call localVarCall = orderGetByFilterValidateBeforeCall(statuses, emailAddresses, merchantOrderNos, channelOrderNos, fromDate, toDate, fromCreatedAtDate, excludeMarketplaceFulfilledOrdersAndLines, fulfillmentType, onlyWithCancellationRequests, page, null);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Orders By Filter. (asynchronously)
     * Fetch orders based on the provided OrderFilter.
     * @param statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param emailAddresses Client emailaddresses to filter on. (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fromDate Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param toDate Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param onlyWithCancellationRequests Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderGetByFilterAsync(List<OrderStatusView> statuses, List<String> emailAddresses, List<String> merchantOrderNos, List<String> channelOrderNos, OffsetDateTime fromDate, OffsetDateTime toDate, OffsetDateTime fromCreatedAtDate, Boolean excludeMarketplaceFulfilledOrdersAndLines, FulfillmentType fulfillmentType, Boolean onlyWithCancellationRequests, Integer page, final ApiCallback<CollectionOfMerchantOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderGetByFilterValidateBeforeCall(statuses, emailAddresses, merchantOrderNos, channelOrderNos, fromDate, toDate, fromCreatedAtDate, excludeMarketplaceFulfilledOrdersAndLines, fulfillmentType, onlyWithCancellationRequests, page, _callback);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderGetNew
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderGetNewCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/orders/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderGetNewValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = orderGetNewCall(_callback);
        return localVarCall;

    }

    /**
     * Get New Orders.
     * Fetch newly placed orders (order with status NEW).
     * @return CollectionOfMerchantOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CollectionOfMerchantOrderResponse orderGetNew() throws ApiException {
        ApiResponse<CollectionOfMerchantOrderResponse> localVarResp = orderGetNewWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get New Orders.
     * Fetch newly placed orders (order with status NEW).
     * @return ApiResponse&lt;CollectionOfMerchantOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionOfMerchantOrderResponse> orderGetNewWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = orderGetNewValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get New Orders. (asynchronously)
     * Fetch newly placed orders (order with status NEW).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderGetNewAsync(final ApiCallback<CollectionOfMerchantOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderGetNewValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderInvoice
     * @param merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderInvoiceCall(String merchantOrderNo, Boolean useCustomerCulture, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/orders/{merchantOrderNo}/invoice"
            .replaceAll("\\{" + "merchantOrderNo" + "\\}", localVarApiClient.escapeString(merchantOrderNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useCustomerCulture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCustomerCulture", useCustomerCulture));
        }

        final String[] localVarAccepts = {
            "application/pdf", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderInvoiceValidateBeforeCall(String merchantOrderNo, Boolean useCustomerCulture, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantOrderNo' is set
        if (merchantOrderNo == null) {
            throw new ApiException("Missing the required parameter 'merchantOrderNo' when calling orderInvoice(Async)");
        }
        

        okhttp3.Call localVarCall = orderInvoiceCall(merchantOrderNo, useCustomerCulture, _callback);
        return localVarCall;

    }

    /**
     * Download Invoice.
     * Generates the ChannelEngine VAT invoice for this order in PDF.
     * @param merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public File orderInvoice(String merchantOrderNo, Boolean useCustomerCulture) throws ApiException {
        ApiResponse<File> localVarResp = orderInvoiceWithHttpInfo(merchantOrderNo, useCustomerCulture);
        return localVarResp.getData();
    }

    /**
     * Download Invoice.
     * Generates the ChannelEngine VAT invoice for this order in PDF.
     * @param merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> orderInvoiceWithHttpInfo(String merchantOrderNo, Boolean useCustomerCulture) throws ApiException {
        okhttp3.Call localVarCall = orderInvoiceValidateBeforeCall(merchantOrderNo, useCustomerCulture, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download Invoice. (asynchronously)
     * Generates the ChannelEngine VAT invoice for this order in PDF.
     * @param merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderInvoiceAsync(String merchantOrderNo, Boolean useCustomerCulture, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderInvoiceValidateBeforeCall(merchantOrderNo, useCustomerCulture, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderPackingSlip
     * @param merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packing Slip PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderPackingSlipCall(String merchantOrderNo, Boolean useCustomerCulture, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/orders/{merchantOrderNo}/packingslip"
            .replaceAll("\\{" + "merchantOrderNo" + "\\}", localVarApiClient.escapeString(merchantOrderNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useCustomerCulture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCustomerCulture", useCustomerCulture));
        }

        final String[] localVarAccepts = {
            "application/pdf", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderPackingSlipValidateBeforeCall(String merchantOrderNo, Boolean useCustomerCulture, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantOrderNo' is set
        if (merchantOrderNo == null) {
            throw new ApiException("Missing the required parameter 'merchantOrderNo' when calling orderPackingSlip(Async)");
        }
        

        okhttp3.Call localVarCall = orderPackingSlipCall(merchantOrderNo, useCustomerCulture, _callback);
        return localVarCall;

    }

    /**
     * Download Packing Slip.
     * Generates the ChannelEngine packing slip for this order in PDF.
     * @param merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packing Slip PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public File orderPackingSlip(String merchantOrderNo, Boolean useCustomerCulture) throws ApiException {
        ApiResponse<File> localVarResp = orderPackingSlipWithHttpInfo(merchantOrderNo, useCustomerCulture);
        return localVarResp.getData();
    }

    /**
     * Download Packing Slip.
     * Generates the ChannelEngine packing slip for this order in PDF.
     * @param merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packing Slip PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> orderPackingSlipWithHttpInfo(String merchantOrderNo, Boolean useCustomerCulture) throws ApiException {
        okhttp3.Call localVarCall = orderPackingSlipValidateBeforeCall(merchantOrderNo, useCustomerCulture, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download Packing Slip. (asynchronously)
     * Generates the ChannelEngine packing slip for this order in PDF.
     * @param merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packing Slip PDF </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderPackingSlipAsync(String merchantOrderNo, Boolean useCustomerCulture, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderPackingSlipValidateBeforeCall(merchantOrderNo, useCustomerCulture, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderUpdate
     * @param merchantOrderCommentUpdateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderUpdateCall(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantOrderCommentUpdateRequest;

        // create path and map variables
        String localVarPath = "/v2/orders/comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderUpdateValidateBeforeCall(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = orderUpdateCall(merchantOrderCommentUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update Comment.
     * Update the merchant comment for an order. Both the ChannelEngine order id as the&lt;br /&gt;merchant order number can be used for updating a comment.
     * @param merchantOrderCommentUpdateRequest  (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse orderUpdate(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = orderUpdateWithHttpInfo(merchantOrderCommentUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update Comment.
     * Update the merchant comment for an order. Both the ChannelEngine order id as the&lt;br /&gt;merchant order number can be used for updating a comment.
     * @param merchantOrderCommentUpdateRequest  (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> orderUpdateWithHttpInfo(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = orderUpdateValidateBeforeCall(merchantOrderCommentUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Comment. (asynchronously)
     * Update the merchant comment for an order. Both the ChannelEngine order id as the&lt;br /&gt;merchant order number can be used for updating a comment.
     * @param merchantOrderCommentUpdateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderUpdateAsync(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderUpdateValidateBeforeCall(merchantOrderCommentUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
