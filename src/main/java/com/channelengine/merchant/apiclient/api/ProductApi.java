/*
 * ChannelEngine Merchant API
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.13.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.channelengine.merchant.apiclient.api;

import com.channelengine.merchant.apiclient.ApiCallback;
import com.channelengine.merchant.apiclient.ApiClient;
import com.channelengine.merchant.apiclient.ApiException;
import com.channelengine.merchant.apiclient.ApiResponse;
import com.channelengine.merchant.apiclient.Configuration;
import com.channelengine.merchant.apiclient.Pair;
import com.channelengine.merchant.apiclient.ProgressRequestBody;
import com.channelengine.merchant.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.channelengine.merchant.apiclient.model.CollectionOfMerchantProductResponse;
import com.channelengine.merchant.apiclient.model.MerchantProductRequest;
import com.channelengine.merchant.apiclient.model.ModelApiResponse;
import com.channelengine.merchant.apiclient.model.Operation;
import com.channelengine.merchant.apiclient.model.PatchMerchantProductDto;
import com.channelengine.merchant.apiclient.model.SingleOfMerchantProductResponse;
import com.channelengine.merchant.apiclient.model.SingleOfProductCreationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductApi {
    private ApiClient localVarApiClient;

    public ProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for productBulkDelete
     * @param requestBody The list of MerchantProductNo of the products you wish to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productBulkDeleteCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/products/bulkdelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productBulkDeleteValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling productBulkDelete(Async)");
        }
        

        okhttp3.Call localVarCall = productBulkDeleteCall(requestBody, _callback);
        return localVarCall;

    }

    /**
     * Delete multiple Products.
     * Delete the products based on the merchant references.&lt;br /&gt;Note that we do not really delete products, as the products&lt;br /&gt;might still be referenced by orders. Therefore, the references&lt;br /&gt;used for these products cannot be reused. We do however deactivate the products&lt;br /&gt;which means that they will not be sent to channels.
     * @param requestBody The list of MerchantProductNo of the products you wish to delete. (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse productBulkDelete(List<String> requestBody) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = productBulkDeleteWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * Delete multiple Products.
     * Delete the products based on the merchant references.&lt;br /&gt;Note that we do not really delete products, as the products&lt;br /&gt;might still be referenced by orders. Therefore, the references&lt;br /&gt;used for these products cannot be reused. We do however deactivate the products&lt;br /&gt;which means that they will not be sent to channels.
     * @param requestBody The list of MerchantProductNo of the products you wish to delete. (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> productBulkDeleteWithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = productBulkDeleteValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete multiple Products. (asynchronously)
     * Delete the products based on the merchant references.&lt;br /&gt;Note that we do not really delete products, as the products&lt;br /&gt;might still be referenced by orders. Therefore, the references&lt;br /&gt;used for these products cannot be reused. We do however deactivate the products&lt;br /&gt;which means that they will not be sent to channels.
     * @param requestBody The list of MerchantProductNo of the products you wish to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productBulkDeleteAsync(List<String> requestBody, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = productBulkDeleteValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productBulkPatch
     * @param patchMerchantProductDto 1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productBulkPatchCall(PatchMerchantProductDto patchMerchantProductDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchMerchantProductDto;

        // create path and map variables
        String localVarPath = "/v2/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productBulkPatchValidateBeforeCall(PatchMerchantProductDto patchMerchantProductDto, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productBulkPatchCall(patchMerchantProductDto, _callback);
        return localVarCall;

    }

    /**
     * Bulk Patch Products
     * This endpoint allows you to update multiple fields on a multiple products.&lt;br /&gt;Products sent in a request can only be updated for the fields listed in object &#39;PropertiesToUpdate&#39;. &lt;br /&gt;In other words, you specify which products you want to update and which fields should be updated for all products.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products&lt;br /&gt; {&lt;br /&gt; \&quot;PropertiesToUpdate\&quot;: [&lt;br /&gt; \&quot;name\&quot;,&lt;br /&gt; \&quot;description\&quot;&lt;br /&gt; ],&lt;br /&gt; \&quot;MerchantProductRequestModels\&quot;: [&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription\&quot;,&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo2\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName3\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription1\&quot;,&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; }
     * @param patchMerchantProductDto 1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)
     * @return SingleOfProductCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SingleOfProductCreationResult productBulkPatch(PatchMerchantProductDto patchMerchantProductDto) throws ApiException {
        ApiResponse<SingleOfProductCreationResult> localVarResp = productBulkPatchWithHttpInfo(patchMerchantProductDto);
        return localVarResp.getData();
    }

    /**
     * Bulk Patch Products
     * This endpoint allows you to update multiple fields on a multiple products.&lt;br /&gt;Products sent in a request can only be updated for the fields listed in object &#39;PropertiesToUpdate&#39;. &lt;br /&gt;In other words, you specify which products you want to update and which fields should be updated for all products.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products&lt;br /&gt; {&lt;br /&gt; \&quot;PropertiesToUpdate\&quot;: [&lt;br /&gt; \&quot;name\&quot;,&lt;br /&gt; \&quot;description\&quot;&lt;br /&gt; ],&lt;br /&gt; \&quot;MerchantProductRequestModels\&quot;: [&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription\&quot;,&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo2\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName3\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription1\&quot;,&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; }
     * @param patchMerchantProductDto 1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)
     * @return ApiResponse&lt;SingleOfProductCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleOfProductCreationResult> productBulkPatchWithHttpInfo(PatchMerchantProductDto patchMerchantProductDto) throws ApiException {
        okhttp3.Call localVarCall = productBulkPatchValidateBeforeCall(patchMerchantProductDto, null);
        Type localVarReturnType = new TypeToken<SingleOfProductCreationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk Patch Products (asynchronously)
     * This endpoint allows you to update multiple fields on a multiple products.&lt;br /&gt;Products sent in a request can only be updated for the fields listed in object &#39;PropertiesToUpdate&#39;. &lt;br /&gt;In other words, you specify which products you want to update and which fields should be updated for all products.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products&lt;br /&gt; {&lt;br /&gt; \&quot;PropertiesToUpdate\&quot;: [&lt;br /&gt; \&quot;name\&quot;,&lt;br /&gt; \&quot;description\&quot;&lt;br /&gt; ],&lt;br /&gt; \&quot;MerchantProductRequestModels\&quot;: [&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription\&quot;,&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo2\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName3\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription1\&quot;,&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; }
     * @param patchMerchantProductDto 1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productBulkPatchAsync(PatchMerchantProductDto patchMerchantProductDto, final ApiCallback<SingleOfProductCreationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = productBulkPatchValidateBeforeCall(patchMerchantProductDto, _callback);
        Type localVarReturnType = new TypeToken<SingleOfProductCreationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCreate
     * @param merchantProductRequest  (required)
     * @param ignoreStock  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCreateCall(List<MerchantProductRequest> merchantProductRequest, Boolean ignoreStock, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantProductRequest;

        // create path and map variables
        String localVarPath = "/v2/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ignoreStock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreStock", ignoreStock));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCreateValidateBeforeCall(List<MerchantProductRequest> merchantProductRequest, Boolean ignoreStock, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantProductRequest' is set
        if (merchantProductRequest == null) {
            throw new ApiException("Missing the required parameter 'merchantProductRequest' when calling productCreate(Async)");
        }
        

        okhttp3.Call localVarCall = productCreateCall(merchantProductRequest, ignoreStock, _callback);
        return localVarCall;

    }

    /**
     * Upsert Products.
     * Upsert (update or create) products. The parent serves as the &#39;base&#39; product of the children.&lt;br /&gt;For example, the children could be different sizes or colors of the parent product.&lt;br /&gt;For channels where every size and color are different products this does not make any difference&lt;br /&gt;(the children will just be sent separately, while ignoring the parent).&lt;br /&gt;But there are channels where the parent and the children need to be sent together, for example&lt;br /&gt;when there is one product with a list of sizes. In this case all the product information is retrieved&lt;br /&gt;from the parent product while the size list is generated from the children.&lt;br /&gt; &lt;br /&gt;Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it&lt;br /&gt;does not end up on the marketplaces itself. Only the children can be purchased.&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt; &lt;br /&gt;When \&quot;ignoreStock\&quot; query string parameter is set to \&quot;true\&quot;, stock will not be updated
     * @param merchantProductRequest  (required)
     * @param ignoreStock  (optional, default to false)
     * @return SingleOfProductCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SingleOfProductCreationResult productCreate(List<MerchantProductRequest> merchantProductRequest, Boolean ignoreStock) throws ApiException {
        ApiResponse<SingleOfProductCreationResult> localVarResp = productCreateWithHttpInfo(merchantProductRequest, ignoreStock);
        return localVarResp.getData();
    }

    /**
     * Upsert Products.
     * Upsert (update or create) products. The parent serves as the &#39;base&#39; product of the children.&lt;br /&gt;For example, the children could be different sizes or colors of the parent product.&lt;br /&gt;For channels where every size and color are different products this does not make any difference&lt;br /&gt;(the children will just be sent separately, while ignoring the parent).&lt;br /&gt;But there are channels where the parent and the children need to be sent together, for example&lt;br /&gt;when there is one product with a list of sizes. In this case all the product information is retrieved&lt;br /&gt;from the parent product while the size list is generated from the children.&lt;br /&gt; &lt;br /&gt;Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it&lt;br /&gt;does not end up on the marketplaces itself. Only the children can be purchased.&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt; &lt;br /&gt;When \&quot;ignoreStock\&quot; query string parameter is set to \&quot;true\&quot;, stock will not be updated
     * @param merchantProductRequest  (required)
     * @param ignoreStock  (optional, default to false)
     * @return ApiResponse&lt;SingleOfProductCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleOfProductCreationResult> productCreateWithHttpInfo(List<MerchantProductRequest> merchantProductRequest, Boolean ignoreStock) throws ApiException {
        okhttp3.Call localVarCall = productCreateValidateBeforeCall(merchantProductRequest, ignoreStock, null);
        Type localVarReturnType = new TypeToken<SingleOfProductCreationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert Products. (asynchronously)
     * Upsert (update or create) products. The parent serves as the &#39;base&#39; product of the children.&lt;br /&gt;For example, the children could be different sizes or colors of the parent product.&lt;br /&gt;For channels where every size and color are different products this does not make any difference&lt;br /&gt;(the children will just be sent separately, while ignoring the parent).&lt;br /&gt;But there are channels where the parent and the children need to be sent together, for example&lt;br /&gt;when there is one product with a list of sizes. In this case all the product information is retrieved&lt;br /&gt;from the parent product while the size list is generated from the children.&lt;br /&gt; &lt;br /&gt;Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it&lt;br /&gt;does not end up on the marketplaces itself. Only the children can be purchased.&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt; &lt;br /&gt;When \&quot;ignoreStock\&quot; query string parameter is set to \&quot;true\&quot;, stock will not be updated
     * @param merchantProductRequest  (required)
     * @param ignoreStock  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCreateAsync(List<MerchantProductRequest> merchantProductRequest, Boolean ignoreStock, final ApiCallback<SingleOfProductCreationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCreateValidateBeforeCall(merchantProductRequest, ignoreStock, _callback);
        Type localVarReturnType = new TypeToken<SingleOfProductCreationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productDelete
     * @param merchantProductNo The MerchantProductNo of the product you wish to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productDeleteCall(String merchantProductNo, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/products/{merchantProductNo}"
            .replaceAll("\\{" + "merchantProductNo" + "\\}", localVarApiClient.escapeString(merchantProductNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productDeleteValidateBeforeCall(String merchantProductNo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantProductNo' is set
        if (merchantProductNo == null) {
            throw new ApiException("Missing the required parameter 'merchantProductNo' when calling productDelete(Async)");
        }
        

        okhttp3.Call localVarCall = productDeleteCall(merchantProductNo, _callback);
        return localVarCall;

    }

    /**
     * Delete Product.
     * Delete a product based on the merchant reference.&lt;br /&gt;Note that we do not really delete a product, as the product&lt;br /&gt;might still be referenced by orders etc. Therefore, the references&lt;br /&gt;used for this product cannot be reused. We do however deactivate the product&lt;br /&gt;which means that it will not be sent to channels.
     * @param merchantProductNo The MerchantProductNo of the product you wish to delete. (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse productDelete(String merchantProductNo) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = productDeleteWithHttpInfo(merchantProductNo);
        return localVarResp.getData();
    }

    /**
     * Delete Product.
     * Delete a product based on the merchant reference.&lt;br /&gt;Note that we do not really delete a product, as the product&lt;br /&gt;might still be referenced by orders etc. Therefore, the references&lt;br /&gt;used for this product cannot be reused. We do however deactivate the product&lt;br /&gt;which means that it will not be sent to channels.
     * @param merchantProductNo The MerchantProductNo of the product you wish to delete. (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> productDeleteWithHttpInfo(String merchantProductNo) throws ApiException {
        okhttp3.Call localVarCall = productDeleteValidateBeforeCall(merchantProductNo, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Product. (asynchronously)
     * Delete a product based on the merchant reference.&lt;br /&gt;Note that we do not really delete a product, as the product&lt;br /&gt;might still be referenced by orders etc. Therefore, the references&lt;br /&gt;used for this product cannot be reused. We do however deactivate the product&lt;br /&gt;which means that it will not be sent to channels.
     * @param merchantProductNo The MerchantProductNo of the product you wish to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productDeleteAsync(String merchantProductNo, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = productDeleteValidateBeforeCall(merchantProductNo, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productGetByFilter
     * @param search Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)
     * @param eanList Search products by submitting a list of EAN&#39;s. (optional)
     * @param merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGetByFilterCall(String search, List<String> eanList, List<String> merchantProductNoList, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (eanList != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "eanList", eanList));
        }

        if (merchantProductNoList != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "merchantProductNoList", merchantProductNoList));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productGetByFilterValidateBeforeCall(String search, List<String> eanList, List<String> merchantProductNoList, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productGetByFilterCall(search, eanList, merchantProductNoList, page, _callback);
        return localVarCall;

    }

    /**
     * Get Products.
     * Retrieve all products.
     * @param search Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)
     * @param eanList Search products by submitting a list of EAN&#39;s. (optional)
     * @param merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return CollectionOfMerchantProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CollectionOfMerchantProductResponse productGetByFilter(String search, List<String> eanList, List<String> merchantProductNoList, Integer page) throws ApiException {
        ApiResponse<CollectionOfMerchantProductResponse> localVarResp = productGetByFilterWithHttpInfo(search, eanList, merchantProductNoList, page);
        return localVarResp.getData();
    }

    /**
     * Get Products.
     * Retrieve all products.
     * @param search Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)
     * @param eanList Search products by submitting a list of EAN&#39;s. (optional)
     * @param merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return ApiResponse&lt;CollectionOfMerchantProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionOfMerchantProductResponse> productGetByFilterWithHttpInfo(String search, List<String> eanList, List<String> merchantProductNoList, Integer page) throws ApiException {
        okhttp3.Call localVarCall = productGetByFilterValidateBeforeCall(search, eanList, merchantProductNoList, page, null);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Products. (asynchronously)
     * Retrieve all products.
     * @param search Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)
     * @param eanList Search products by submitting a list of EAN&#39;s. (optional)
     * @param merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGetByFilterAsync(String search, List<String> eanList, List<String> merchantProductNoList, Integer page, final ApiCallback<CollectionOfMerchantProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = productGetByFilterValidateBeforeCall(search, eanList, merchantProductNoList, page, _callback);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productGetByMerchantProductNo
     * @param merchantProductNo The unique product reference used by the Merchant (sku). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGetByMerchantProductNoCall(String merchantProductNo, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/products/{merchantProductNo}"
            .replaceAll("\\{" + "merchantProductNo" + "\\}", localVarApiClient.escapeString(merchantProductNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productGetByMerchantProductNoValidateBeforeCall(String merchantProductNo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantProductNo' is set
        if (merchantProductNo == null) {
            throw new ApiException("Missing the required parameter 'merchantProductNo' when calling productGetByMerchantProductNo(Async)");
        }
        

        okhttp3.Call localVarCall = productGetByMerchantProductNoCall(merchantProductNo, _callback);
        return localVarCall;

    }

    /**
     * Get Product.
     * Retrieve a product based on the merchant reference.
     * @param merchantProductNo The unique product reference used by the Merchant (sku). (required)
     * @return SingleOfMerchantProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SingleOfMerchantProductResponse productGetByMerchantProductNo(String merchantProductNo) throws ApiException {
        ApiResponse<SingleOfMerchantProductResponse> localVarResp = productGetByMerchantProductNoWithHttpInfo(merchantProductNo);
        return localVarResp.getData();
    }

    /**
     * Get Product.
     * Retrieve a product based on the merchant reference.
     * @param merchantProductNo The unique product reference used by the Merchant (sku). (required)
     * @return ApiResponse&lt;SingleOfMerchantProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleOfMerchantProductResponse> productGetByMerchantProductNoWithHttpInfo(String merchantProductNo) throws ApiException {
        okhttp3.Call localVarCall = productGetByMerchantProductNoValidateBeforeCall(merchantProductNo, null);
        Type localVarReturnType = new TypeToken<SingleOfMerchantProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product. (asynchronously)
     * Retrieve a product based on the merchant reference.
     * @param merchantProductNo The unique product reference used by the Merchant (sku). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGetByMerchantProductNoAsync(String merchantProductNo, final ApiCallback<SingleOfMerchantProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = productGetByMerchantProductNoValidateBeforeCall(merchantProductNo, _callback);
        Type localVarReturnType = new TypeToken<SingleOfMerchantProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productPatch
     * @param merchantProductNo The MerchantProductNo of the product you wish to patch (required)
     * @param operation The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPatchCall(String merchantProductNo, List<Operation> operation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = operation;

        // create path and map variables
        String localVarPath = "/v2/products/{merchantProductNo}"
            .replaceAll("\\{" + "merchantProductNo" + "\\}", localVarApiClient.escapeString(merchantProductNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPatchValidateBeforeCall(String merchantProductNo, List<Operation> operation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantProductNo' is set
        if (merchantProductNo == null) {
            throw new ApiException("Missing the required parameter 'merchantProductNo' when calling productPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productPatchCall(merchantProductNo, operation, _callback);
        return localVarCall;

    }

    /**
     * Patch product
     * Patch products. This endpoint allows you to update single fields on a product using patch operations,&lt;br /&gt;without having to supply the other product information.&lt;br /&gt;&lt;br /&gt;The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:&lt;br /&gt;http://jsonpatch.com/&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;ExtraData used as translations is ignored and cannot be changed.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: \&quot;Value\&quot;,&lt;br /&gt; \&quot;path\&quot;: \&quot;Name\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Adding ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: {\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;},&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData/0\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;add\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Replacing ExtraData (will replace entire ExtraData collection):&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: [{\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;}],&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Removing all ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; Or:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;remove\&quot;&lt;br /&gt; }
     * @param merchantProductNo The MerchantProductNo of the product you wish to patch (required)
     * @param operation The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)
     * @return SingleOfProductCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SingleOfProductCreationResult productPatch(String merchantProductNo, List<Operation> operation) throws ApiException {
        ApiResponse<SingleOfProductCreationResult> localVarResp = productPatchWithHttpInfo(merchantProductNo, operation);
        return localVarResp.getData();
    }

    /**
     * Patch product
     * Patch products. This endpoint allows you to update single fields on a product using patch operations,&lt;br /&gt;without having to supply the other product information.&lt;br /&gt;&lt;br /&gt;The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:&lt;br /&gt;http://jsonpatch.com/&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;ExtraData used as translations is ignored and cannot be changed.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: \&quot;Value\&quot;,&lt;br /&gt; \&quot;path\&quot;: \&quot;Name\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Adding ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: {\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;},&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData/0\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;add\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Replacing ExtraData (will replace entire ExtraData collection):&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: [{\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;}],&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Removing all ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; Or:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;remove\&quot;&lt;br /&gt; }
     * @param merchantProductNo The MerchantProductNo of the product you wish to patch (required)
     * @param operation The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)
     * @return ApiResponse&lt;SingleOfProductCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleOfProductCreationResult> productPatchWithHttpInfo(String merchantProductNo, List<Operation> operation) throws ApiException {
        okhttp3.Call localVarCall = productPatchValidateBeforeCall(merchantProductNo, operation, null);
        Type localVarReturnType = new TypeToken<SingleOfProductCreationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch product (asynchronously)
     * Patch products. This endpoint allows you to update single fields on a product using patch operations,&lt;br /&gt;without having to supply the other product information.&lt;br /&gt;&lt;br /&gt;The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:&lt;br /&gt;http://jsonpatch.com/&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;ExtraData used as translations is ignored and cannot be changed.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: \&quot;Value\&quot;,&lt;br /&gt; \&quot;path\&quot;: \&quot;Name\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Adding ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: {\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;},&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData/0\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;add\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Replacing ExtraData (will replace entire ExtraData collection):&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: [{\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;}],&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Removing all ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; Or:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;remove\&quot;&lt;br /&gt; }
     * @param merchantProductNo The MerchantProductNo of the product you wish to patch (required)
     * @param operation The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPatchAsync(String merchantProductNo, List<Operation> operation, final ApiCallback<SingleOfProductCreationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPatchValidateBeforeCall(merchantProductNo, operation, _callback);
        Type localVarReturnType = new TypeToken<SingleOfProductCreationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
