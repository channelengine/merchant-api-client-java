/*
 * ChannelEngine Merchant API
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.9.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.channelengine.merchant.apiclient.api;

import com.channelengine.merchant.apiclient.ApiCallback;
import com.channelengine.merchant.apiclient.ApiClient;
import com.channelengine.merchant.apiclient.ApiException;
import com.channelengine.merchant.apiclient.ApiResponse;
import com.channelengine.merchant.apiclient.Configuration;
import com.channelengine.merchant.apiclient.Pair;
import com.channelengine.merchant.apiclient.ProgressRequestBody;
import com.channelengine.merchant.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.channelengine.merchant.apiclient.model.CollectionOfMerchantReturnResponse;
import com.channelengine.merchant.apiclient.model.CollectionOfMerchantSingleOrderReturnResponse;
import com.channelengine.merchant.apiclient.model.CreatorFilter;
import com.channelengine.merchant.apiclient.model.FulfillmentType;
import com.channelengine.merchant.apiclient.model.MerchantReturnRequest;
import com.channelengine.merchant.apiclient.model.MerchantReturnUpdateRequest;
import com.channelengine.merchant.apiclient.model.ModelApiResponse;
import org.threeten.bp.OffsetDateTime;
import com.channelengine.merchant.apiclient.model.ReturnReason;
import com.channelengine.merchant.apiclient.model.ReturnStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReturnApi {
    private ApiClient localVarApiClient;

    public ReturnApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReturnApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for returnDeclareForMerchant
     * @param merchantReturnRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnDeclareForMerchantCall(MerchantReturnRequest merchantReturnRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantReturnRequest;

        // create path and map variables
        String localVarPath = "/v2/returns/merchant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnDeclareForMerchantValidateBeforeCall(MerchantReturnRequest merchantReturnRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = returnDeclareForMerchantCall(merchantReturnRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Return.
     * Mark (part of) an order as returned by the customer.
     * @param merchantReturnRequest  (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse returnDeclareForMerchant(MerchantReturnRequest merchantReturnRequest) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = returnDeclareForMerchantWithHttpInfo(merchantReturnRequest);
        return localVarResp.getData();
    }

    /**
     * Create Return.
     * Mark (part of) an order as returned by the customer.
     * @param merchantReturnRequest  (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> returnDeclareForMerchantWithHttpInfo(MerchantReturnRequest merchantReturnRequest) throws ApiException {
        okhttp3.Call localVarCall = returnDeclareForMerchantValidateBeforeCall(merchantReturnRequest, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Return. (asynchronously)
     * Mark (part of) an order as returned by the customer.
     * @param merchantReturnRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnDeclareForMerchantAsync(MerchantReturnRequest merchantReturnRequest, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnDeclareForMerchantValidateBeforeCall(merchantReturnRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for returnGetByMerchantOrderNo
     * @param merchantOrderNo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnGetByMerchantOrderNoCall(String merchantOrderNo, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/returns/merchant/{merchantOrderNo}"
            .replaceAll("\\{" + "merchantOrderNo" + "\\}", localVarApiClient.escapeString(merchantOrderNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnGetByMerchantOrderNoValidateBeforeCall(String merchantOrderNo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantOrderNo' is set
        if (merchantOrderNo == null) {
            throw new ApiException("Missing the required parameter 'merchantOrderNo' when calling returnGetByMerchantOrderNo(Async)");
        }
        

        okhttp3.Call localVarCall = returnGetByMerchantOrderNoCall(merchantOrderNo, _callback);
        return localVarCall;

    }

    /**
     * Get Return.
     * Retrieve returns based on the supplied merchant order number. May return more than 1 result.&lt;br /&gt;This call is supposed to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
     * @param merchantOrderNo  (required)
     * @return CollectionOfMerchantSingleOrderReturnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CollectionOfMerchantSingleOrderReturnResponse returnGetByMerchantOrderNo(String merchantOrderNo) throws ApiException {
        ApiResponse<CollectionOfMerchantSingleOrderReturnResponse> localVarResp = returnGetByMerchantOrderNoWithHttpInfo(merchantOrderNo);
        return localVarResp.getData();
    }

    /**
     * Get Return.
     * Retrieve returns based on the supplied merchant order number. May return more than 1 result.&lt;br /&gt;This call is supposed to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
     * @param merchantOrderNo  (required)
     * @return ApiResponse&lt;CollectionOfMerchantSingleOrderReturnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionOfMerchantSingleOrderReturnResponse> returnGetByMerchantOrderNoWithHttpInfo(String merchantOrderNo) throws ApiException {
        okhttp3.Call localVarCall = returnGetByMerchantOrderNoValidateBeforeCall(merchantOrderNo, null);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantSingleOrderReturnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Return. (asynchronously)
     * Retrieve returns based on the supplied merchant order number. May return more than 1 result.&lt;br /&gt;This call is supposed to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
     * @param merchantOrderNo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnGetByMerchantOrderNoAsync(String merchantOrderNo, final ApiCallback<CollectionOfMerchantSingleOrderReturnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnGetByMerchantOrderNoValidateBeforeCall(merchantOrderNo, _callback);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantSingleOrderReturnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for returnGetDeclaredByChannel
     * @param channelIds Filter on Channel IDs (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param statuses Return status(es) to filter on. (optional)
     * @param reasons Return reason(s) to filter on. (optional)
     * @param fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnGetDeclaredByChannelCall(List<Integer> channelIds, List<String> merchantOrderNos, List<String> channelOrderNos, FulfillmentType fulfillmentType, List<ReturnStatus> statuses, List<ReturnReason> reasons, OffsetDateTime fromDate, OffsetDateTime toDate, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/returns/merchant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "channelIds", channelIds));
        }

        if (merchantOrderNos != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "merchantOrderNos", merchantOrderNos));
        }

        if (channelOrderNos != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "channelOrderNos", channelOrderNos));
        }

        if (fulfillmentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulfillmentType", fulfillmentType));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statuses", statuses));
        }

        if (reasons != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "reasons", reasons));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnGetDeclaredByChannelValidateBeforeCall(List<Integer> channelIds, List<String> merchantOrderNos, List<String> channelOrderNos, FulfillmentType fulfillmentType, List<ReturnStatus> statuses, List<ReturnReason> reasons, OffsetDateTime fromDate, OffsetDateTime toDate, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = returnGetDeclaredByChannelCall(channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, page, _callback);
        return localVarCall;

    }

    /**
     * Get Returns.
     * Get all returns created by the channel. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
     * @param channelIds Filter on Channel IDs (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param statuses Return status(es) to filter on. (optional)
     * @param reasons Return reason(s) to filter on. (optional)
     * @param fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return CollectionOfMerchantReturnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CollectionOfMerchantReturnResponse returnGetDeclaredByChannel(List<Integer> channelIds, List<String> merchantOrderNos, List<String> channelOrderNos, FulfillmentType fulfillmentType, List<ReturnStatus> statuses, List<ReturnReason> reasons, OffsetDateTime fromDate, OffsetDateTime toDate, Integer page) throws ApiException {
        ApiResponse<CollectionOfMerchantReturnResponse> localVarResp = returnGetDeclaredByChannelWithHttpInfo(channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, page);
        return localVarResp.getData();
    }

    /**
     * Get Returns.
     * Get all returns created by the channel. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
     * @param channelIds Filter on Channel IDs (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param statuses Return status(es) to filter on. (optional)
     * @param reasons Return reason(s) to filter on. (optional)
     * @param fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return ApiResponse&lt;CollectionOfMerchantReturnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionOfMerchantReturnResponse> returnGetDeclaredByChannelWithHttpInfo(List<Integer> channelIds, List<String> merchantOrderNos, List<String> channelOrderNos, FulfillmentType fulfillmentType, List<ReturnStatus> statuses, List<ReturnReason> reasons, OffsetDateTime fromDate, OffsetDateTime toDate, Integer page) throws ApiException {
        okhttp3.Call localVarCall = returnGetDeclaredByChannelValidateBeforeCall(channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, page, null);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantReturnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Returns. (asynchronously)
     * Get all returns created by the channel. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
     * @param channelIds Filter on Channel IDs (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param statuses Return status(es) to filter on. (optional)
     * @param reasons Return reason(s) to filter on. (optional)
     * @param fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnGetDeclaredByChannelAsync(List<Integer> channelIds, List<String> merchantOrderNos, List<String> channelOrderNos, FulfillmentType fulfillmentType, List<ReturnStatus> statuses, List<ReturnReason> reasons, OffsetDateTime fromDate, OffsetDateTime toDate, Integer page, final ApiCallback<CollectionOfMerchantReturnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnGetDeclaredByChannelValidateBeforeCall(channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, page, _callback);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantReturnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for returnGetReturns
     * @param creatorType Filter on the return&#39;s creator. Default is MIXED. (optional)
     * @param channelIds Filter on Channel IDs (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param statuses Return status(es) to filter on. (optional)
     * @param reasons Return reason(s) to filter on. (optional)
     * @param fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnGetReturnsCall(CreatorFilter creatorType, List<Integer> channelIds, List<String> merchantOrderNos, List<String> channelOrderNos, FulfillmentType fulfillmentType, List<ReturnStatus> statuses, List<ReturnReason> reasons, OffsetDateTime fromDate, OffsetDateTime toDate, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/returns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (creatorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creatorType", creatorType));
        }

        if (channelIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "channelIds", channelIds));
        }

        if (merchantOrderNos != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "merchantOrderNos", merchantOrderNos));
        }

        if (channelOrderNos != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "channelOrderNos", channelOrderNos));
        }

        if (fulfillmentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulfillmentType", fulfillmentType));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statuses", statuses));
        }

        if (reasons != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "reasons", reasons));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnGetReturnsValidateBeforeCall(CreatorFilter creatorType, List<Integer> channelIds, List<String> merchantOrderNos, List<String> channelOrderNos, FulfillmentType fulfillmentType, List<ReturnStatus> statuses, List<ReturnReason> reasons, OffsetDateTime fromDate, OffsetDateTime toDate, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = returnGetReturnsCall(creatorType, channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, page, _callback);
        return localVarCall;

    }

    /**
     * Get Returns.
     * Get all returns created by the merchant. This call is supposed&lt;br /&gt;to be used by merchants. To get returns created by channels, the &#39;GET /v2/returns/merchant&#39; endpoint should be used.&lt;br /&gt;Channels should use the &#39;GET /v2/returns/channel&#39; call.
     * @param creatorType Filter on the return&#39;s creator. Default is MIXED. (optional)
     * @param channelIds Filter on Channel IDs (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param statuses Return status(es) to filter on. (optional)
     * @param reasons Return reason(s) to filter on. (optional)
     * @param fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return CollectionOfMerchantReturnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CollectionOfMerchantReturnResponse returnGetReturns(CreatorFilter creatorType, List<Integer> channelIds, List<String> merchantOrderNos, List<String> channelOrderNos, FulfillmentType fulfillmentType, List<ReturnStatus> statuses, List<ReturnReason> reasons, OffsetDateTime fromDate, OffsetDateTime toDate, Integer page) throws ApiException {
        ApiResponse<CollectionOfMerchantReturnResponse> localVarResp = returnGetReturnsWithHttpInfo(creatorType, channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, page);
        return localVarResp.getData();
    }

    /**
     * Get Returns.
     * Get all returns created by the merchant. This call is supposed&lt;br /&gt;to be used by merchants. To get returns created by channels, the &#39;GET /v2/returns/merchant&#39; endpoint should be used.&lt;br /&gt;Channels should use the &#39;GET /v2/returns/channel&#39; call.
     * @param creatorType Filter on the return&#39;s creator. Default is MIXED. (optional)
     * @param channelIds Filter on Channel IDs (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param statuses Return status(es) to filter on. (optional)
     * @param reasons Return reason(s) to filter on. (optional)
     * @param fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return ApiResponse&lt;CollectionOfMerchantReturnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionOfMerchantReturnResponse> returnGetReturnsWithHttpInfo(CreatorFilter creatorType, List<Integer> channelIds, List<String> merchantOrderNos, List<String> channelOrderNos, FulfillmentType fulfillmentType, List<ReturnStatus> statuses, List<ReturnReason> reasons, OffsetDateTime fromDate, OffsetDateTime toDate, Integer page) throws ApiException {
        okhttp3.Call localVarCall = returnGetReturnsValidateBeforeCall(creatorType, channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, page, null);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantReturnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Returns. (asynchronously)
     * Get all returns created by the merchant. This call is supposed&lt;br /&gt;to be used by merchants. To get returns created by channels, the &#39;GET /v2/returns/merchant&#39; endpoint should be used.&lt;br /&gt;Channels should use the &#39;GET /v2/returns/channel&#39; call.
     * @param creatorType Filter on the return&#39;s creator. Default is MIXED. (optional)
     * @param channelIds Filter on Channel IDs (optional)
     * @param merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param fulfillmentType Filter on the fulfillment type of the order. (optional)
     * @param statuses Return status(es) to filter on. (optional)
     * @param reasons Return reason(s) to filter on. (optional)
     * @param fromDate Filter on the creation date, starting from this date. This date is inclusive. (optional)
     * @param toDate Filter on the creation date, until this date. This date is exclusive. (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnGetReturnsAsync(CreatorFilter creatorType, List<Integer> channelIds, List<String> merchantOrderNos, List<String> channelOrderNos, FulfillmentType fulfillmentType, List<ReturnStatus> statuses, List<ReturnReason> reasons, OffsetDateTime fromDate, OffsetDateTime toDate, Integer page, final ApiCallback<CollectionOfMerchantReturnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnGetReturnsValidateBeforeCall(creatorType, channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, page, _callback);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantReturnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for returnGetUnhandled
     * @param channelIds Filter on Channel IDs (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnGetUnhandledCall(List<Integer> channelIds, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/returns/merchant/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "channelIds", channelIds));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnGetUnhandledValidateBeforeCall(List<Integer> channelIds, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = returnGetUnhandledCall(channelIds, page, _callback);
        return localVarCall;

    }

    /**
     * Get Unhandled Returns.
     * Get all new / unhandled returns created by channels. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
     * @param channelIds Filter on Channel IDs (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return CollectionOfMerchantReturnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CollectionOfMerchantReturnResponse returnGetUnhandled(List<Integer> channelIds, Integer page) throws ApiException {
        ApiResponse<CollectionOfMerchantReturnResponse> localVarResp = returnGetUnhandledWithHttpInfo(channelIds, page);
        return localVarResp.getData();
    }

    /**
     * Get Unhandled Returns.
     * Get all new / unhandled returns created by channels. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
     * @param channelIds Filter on Channel IDs (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return ApiResponse&lt;CollectionOfMerchantReturnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionOfMerchantReturnResponse> returnGetUnhandledWithHttpInfo(List<Integer> channelIds, Integer page) throws ApiException {
        okhttp3.Call localVarCall = returnGetUnhandledValidateBeforeCall(channelIds, page, null);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantReturnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Unhandled Returns. (asynchronously)
     * Get all new / unhandled returns created by channels. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
     * @param channelIds Filter on Channel IDs (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnGetUnhandledAsync(List<Integer> channelIds, Integer page, final ApiCallback<CollectionOfMerchantReturnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnGetUnhandledValidateBeforeCall(channelIds, page, _callback);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantReturnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for returnUpdateForMerchant
     * @param merchantReturnUpdateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnUpdateForMerchantCall(MerchantReturnUpdateRequest merchantReturnUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantReturnUpdateRequest;

        // create path and map variables
        String localVarPath = "/v2/returns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnUpdateForMerchantValidateBeforeCall(MerchantReturnUpdateRequest merchantReturnUpdateRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = returnUpdateForMerchantCall(merchantReturnUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Mark a return as received.
     * Mark a return as received.
     * @param merchantReturnUpdateRequest  (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse returnUpdateForMerchant(MerchantReturnUpdateRequest merchantReturnUpdateRequest) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = returnUpdateForMerchantWithHttpInfo(merchantReturnUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Mark a return as received.
     * Mark a return as received.
     * @param merchantReturnUpdateRequest  (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> returnUpdateForMerchantWithHttpInfo(MerchantReturnUpdateRequest merchantReturnUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = returnUpdateForMerchantValidateBeforeCall(merchantReturnUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a return as received. (asynchronously)
     * Mark a return as received.
     * @param merchantReturnUpdateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnUpdateForMerchantAsync(MerchantReturnUpdateRequest merchantReturnUpdateRequest, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnUpdateForMerchantValidateBeforeCall(merchantReturnUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
